imports:
  - php

filter:
    excluded_paths:
        - test/*
        - vendor/*
        - bin/*
        - build/*
        - src/Tests/*

tools:
    external_code_coverage:
        timeout: 1000
    php_code_sniffer:
        config:
            standard: PSR2
    sensiolabs_security_checker: true

coding_style:
    php:
        spaces:
            around_operators:
                concatenation: true
            other:
                after_type_cast: true
            within:
                brackets: true
                array_initializer: true
        braces:
            classes_functions:
                class: new-line
                function: new-line
            if:
                else_on_new_line: true
            do_while:
                while_on_new_line: true
            try:
                catch_on_new_line: true
                finally_on_new_line: true
        upper_lower_casing:
            keywords:
                general: lower
            constants:
                true_false_null: lower

checks:
    php:
        uppercase_constants: true
        simplify_boolean_return: true
        return_doc_comments: true
        return_doc_comment_if_not_inferrable: true
        remove_extra_empty_lines: true
        prefer_while_loop_over_for_loop: true
        parameter_doc_comments: true
        param_doc_comment_if_not_inferrable: true
        optional_parameters_at_the_end: true
        no_short_method_names:
            minimum: '3'
        no_long_variable_names:
            maximum: '40'
        no_goto: true
        newline_at_end_of_file: true
        naming_conventions:
            local_variable: '^[a-z][a-zA-Z0-9]*$'
            abstract_class_name: ^Abstract|Factory$
            utility_class_name: 'Utils?$'
            constant_name: '^[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*$'
            property_name: '^[a-z][a-zA-Z0-9]*$'
            method_name: '^[a-z][a-zA-Z0-9]*$'
            parameter_name: '^[a-z][a-zA-Z0-9]*$'
            interface_name: '^[A-Z][a-zA-Z0-9]*Interface$'
            type_name: '^[A-Z][a-zA-Z0-9]*$'
            exception_name: '^[A-Z][a-zA-Z0-9]*Exception$'
            isser_method_name: '^(?:is|has|should|may|supports)'
        function_in_camel_caps: true
        fix_use_statements:
            remove_unused: true
            preserve_multiple: false
            preserve_blanklines: false
            order_alphabetically: false
        classes_in_camel_caps: true
        avoid_unnecessary_concatenation: true
        avoid_perl_style_comments: true
