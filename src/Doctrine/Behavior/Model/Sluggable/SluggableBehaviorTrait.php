<?php

/*
 * This file is part of the Scribe Mantle Bundle.
 *
 * (c) Scribe Inc. <source@scribe.software>
 *
 * For the full copyright and license information, please view the LICENSE.md
 * file that was distributed with this source code.
 */

namespace Scribe\MantleBundle\Doctrine\Behavior\Model\Sluggable;

use Scribe\MantleBundle\Doctrine\Exception\SubscriberEventORMException;
use Scribe\MantleBundle\Doctrine\Exception\SubscriberORMException;

/**
 * Class SluggableBehaviorTrait.
 */
trait SluggableBehaviorTrait
{
    /**
     * @var string
     */
    protected $slug;

    /**
     * @var bool
     */
    protected $slugAutoGenerated;

    /**
     * @var string
     */
    protected $slugNormalizationRegex;

    /**
     * @var string
     */
    protected $slugNormalizationReplacement;

    /**
     * @var string
     */
    protected $slugNormalizationDelimiter;

    /**
     * @return $this
     */
    public function initializeSlug()
    {
        $this->slug = null;

        return $this;
    }

    /**
     * @return $this
     */
    public function initializeSlugAutoGenerated()
    {
        $this->slugAutoGenerated = true;

        return $this;
    }

    /**
     * @return $this
     */
    public function initializeSlugNormalizationRegex()
    {
        $this->slugNormalizationReplacement = '[^0-9a-zA-Z]';

        return $this;
    }

    /**
     * @return $this
     */
    public function initializeSlugNormalizationReplacement()
    {
        $this->slugNormalizationReplacement = '-';

        return $this;
    }

    /**
     * @return $this
     */
    public function initializeSlugNormalizationDelimiter()
    {
        $this->slugNormalizationDelimiter = '+';

        return $this;
    }

    /**
     * Set the slug.
     *
     * @param string $slug
     *
     * @throws SubscriberORMException
     *
     * @return bool
     */
    public function setSlug($slug)
    {
        if (false === $this->isSlugAutoGenerated()) {
            $this->slug = $slug;

            return $this;
        }

        throw new SubscriberORMException(
            'Cannot set slug for entity "%s" as it is configured to be auto-generated.',
            SubscriberORMException::CODE_ORM_SUBSCRIBER_GENERIC, null, get_class($this)
        );
    }

    /**
     * Get the current slug.
     *
     * @return null|string
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * @return bool
     */
    public function isSlugAutoGenerated()
    {
        return (bool) $this->slugAutoGenerated;
    }

    /**
     * @param bool|true $slugAutoGenerated
     *
     * @return $this
     */
    public function setSlugAutoGenerated($slugAutoGenerated = true)
    {
        $this->slugAutoGenerated = (bool) $slugAutoGenerated;

        return $this;
    }

    /**
     * Return an array of the field name(s) used to generate the slug.
     *
     * @return array
     */
    abstract public function getAutoSlugFields();

    /**
     * Returns callable used to sanitize slug.
     *
     * @return callable
     */
    public function getSlugNormalizationCallback()
    {
        return function ($fields, $regex, $replacement, $delimiter) {
            array_walk($fields, function ($f) use ($regex, $replacement) {
                preg_replace('#'.$regex.'#', $replacement, trim(strtolower($f)));
            });

            $slug = implode($delimiter, $fields);

            return preg_replace('#['.preg_quote($replacement, '#').']+#', $replacement, $slug);
        };
    }

    /**
     * Generate the slug.
     *
     * @throws SubscriberEventORMException
     *
     * @returns void
     */
    public function triggerGenerateSlugEvent()
    {
        if (false !== $this->isSlugAutoGenerated() || null === $this->slug) {
            $usablePropertyNames = [];

            foreach ($this->getAutoSlugFields() as $f) {
                if (false === property_exists($this, $f)) {
                    continue;
                }

                $value = $this->$f;
                if (null === $value || false === is_string($value) || true === empty($value)) {
                    continue;
                }

                $usablePropertyNames[] = $value;
            }

            if (false === (count($usablePropertyNames) > 0)) {
                throw new SubscriberEventORMException(
                    'At lease one of the following fields must be non-null and not-empty to generate slug: %s.',
                    SubscriberEventORMException::CODE_ORM_SUBSCRIBER_EVENT, null, implode(',', (array) $this->getAutoSlugFields())
                );
            }

            $normalizationCallback = $this->getSlugNormalizationCallback();
            $this->slug = $normalizationCallback($usablePropertyNames, $this->slugNormalizationRegex, $this->slugNormalizationReplacement);
        }
    }
}

/* EOF */
